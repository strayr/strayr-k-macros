######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[extruder]
# this should really be a note to configure user's printer
max_extrude_only_distance: 700

[gcode_macro M600]
variable_version: 0.4
description: Unloads filament, waiting for a manual load and a resume
gcode:
#TODO set this from printer_variables
    {% set X = params.X|default(printer.toolhead.axis_minimum.x + 10)|float %}
    {% set Y = params.Y|default(printer.toolhead.axis_minimum.y + 10)|float %}
     _DISABLE_FS # Do this out of state save
    
    
   
    _SOUND_ALARM
    PAUSE X={X} Y={Y} #this saves gcode state
    #G4
    #UNLOAD
    

# Unload stratergy:
# Check temp
# Purge extrude
# retract tip, pause, dip to remove string, retract
# main distance retract, pause , slow roll
 #define FILAMENT_UNLOAD_PURGE_RETRACT       13  // (mm) Unload initial retract length.
  #define FILAMENT_UNLOAD_PURGE_DELAY       5000  // (ms) Delay for the filament to cool after retract.
  #define FILAMENT_UNLOAD_PURGE_LENGTH         8  // (mm) An unretract is done, then this length is purged.
  #define FILAMENT_UNLOAD_PURGE_FEEDRATE      25
  #F300 12mm3/s 5mm/s

[gcode_macro _UNLOAD_SEQUENCE]
gcode:

    {% set svv = printer.save_variables.variables %}
    {% set version = printer["gcode_macro M600"].version %}
    {% if svv.filament_version|float < version|float %}
        { action_raise_error("Setup data is older than macro version
        You should check the values in INIT_SETUP and run it to update
        ")}
    {% endif %}
    {% set purge_retract = svv.filament_unload_purge_retract|float %}
    {% set purge_delay = svv.filament_unload_purge_delay|int %}
    {% set purge_length = svv.filament_unload_purge_length|float %}
    {% set retract_feedrate = svv.filament_retract_feedrate|int * 60 %}
    {% set fast_purge_feedrate = svv.filament_purge_feedrate|int * 60 %}
    # this should be load length - safety
    {% set unload_length = svv.filament_load_length|int - svv.filament_unload_safety|int %}
    {% set eject_length = svv.filament_unload_safety|float + printer.configfile.settings.extruder.rotation_distance|float %}
    
    M83 ; relative
    G1 E-{purge_retract} F{retract_feedrate}
    M117 Wait
    G4 P{purge_delay}
    M117 Unloading
    G1 E{purge_retract} F{retract_feedrate}
    G1 E{purge_length} F{fast_purge_feedrate}
    G1 E-{purge_retract} F{retract_feedrate}
    G1 E-{unload_length-purge_retract} F{retract_feedrate}
    #M300
    G4 P5000
    M117 Eject
    G1 E-{eject_length} F{fast_purge_feedrate}
    G4
    M300
    M117 Done
    M82 ; absolute



[gcode_macro UNLOAD]
gcode:
    _DISABLE_FS # Do this out of state save
    SAVE_GCODE_STATE NAME=UNLOAD_state
    {% set tool_t = printer.extruder.temperature %}
    {% set target_t = printer.extruder.target %}
    {% set min_extrude_t = printer.configfile.settings.extruder.min_extrude_temp %}
    
    
    {% if target_t > min_extrude_t %}
        #M300
        M117 {target_t|int} is enough
        {%if not printer.extruder.can_extrude %}
            M117 Wait for {target_t|int}C
            M300
            M109 S{target_t}
            M300
            M117 Hot!
        {% endif %}
        _UNLOAD_SEQUENCE

    {% else %}
        M117 {target_t|int} is too cold
        M300
        G4 P200
        M300
    {% endif %}
    # _RESET_FS NO, only do on LOAD
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=30
    RESTORE_GCODE_STATE NAME=UNLOAD_state
    M117 Filament Sensor Disabled
     { action_respond_info("Filament Motion Sensor will be reenabled on LOAD")}
    

# Load stratergy:
# check extrude temp
# PAUSE
# Slow roll 10mm
# Fast approach meltzone
# purge
[gcode_macro _LOAD_SEQUENCE]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set version = printer["gcode_macro M600"].version %}
    {% if svv.filament_version|float < version|float %}
        { action_raise_error("Setup data is older than macro version
        You should check the values in INIT_SETUP and run it to update
        ")}
    {% endif %}
    {% set purge_retract = svv.filament_pause_retraction %}
    {% set retract_feedrate = svv.filament_retract_feedrate * 60 %}
    {% set purge_length = svv.filament_load_purge_length %}
    {% set load_feedrate = svv.filament_load_feedrate * 60 %}
    {% set fast_purge_feedrate = svv.filament_purge_feedrate * 60 %}
    {% set slow_load_length= svv.filament_load_slow_lenght %}
    {% set slow_load_feedrate= svv.filament_slow_load_feedrate * 60 %}
    {% set load_length = svv.filament_load_length %} 
    
    M83 ; relative
    M117 SLOW E{slow_load_length} F{slow_load_feedrate}
    G1 E{slow_load_length} F{slow_load_feedrate}
    G4 
    M300
    M117 Fast E{load_length} F{load_feedrate}
    G1 E{load_length - slow_load_length} F{load_feedrate}
    G4
    #M300
    M117 PURGE E{purge_length} F{fast_purge_feedrate / 2} 
    G1 E{purge_length} F{fast_purge_feedrate / 2}

    G4 P5000
    
    M117 E{purge_retract} F{fast_purge_feedrate / 2}
    G1 E-{purge_retract} F{retract_feedrate}
    
    G4
    M300
    M117 Done

    G4 P5000

    M82 ; absolute

[gcode_macro LOAD]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_state
    {% set tool_t = printer.extruder.temperature %}
    {% set target_t = printer.extruder.target %}
    {% set min_extrude_t = printer.configfile.settings.extruder.min_extrude_temp %}
    _DISABLE_FS
    {% if target_t > min_extrude_t %}
        M300
        M117 {target_t|int} is enough
        {%if not printer.extruder.can_extrude %}
            M117 Wait for {target_t|int}C
            M300
            M109 S{target_t}
            M300
            M117 Hot!
        {% endif %}
        _LOAD_SEQUENCE

    {% else %}
        M117 {target_t|int} is too cold
        M300
        G4 P200
        M300
    {% endif %}
    #_RESET_FS
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=30
    RESTORE_GCODE_STATE NAME=LOAD_state
    _RESET_FS

[gcode_macro PURGE]
gcode:
    SAVE_GCODE_STATE NAME=PURGE_state
    {% set svv = printer.save_variables.variables %}
    {% set version = printer["gcode_macro M600"].version %}
    {% if svv.filament_version|float < version|float %}
        { action_raise_error("Setup data is older than macro version
        You should check the values in INIT_SETUP and run it to update
        ")}
    {% endif %}
    {% set tool_t = printer.extruder.temperature %}
    {% set target_t = printer.extruder.target %}
    {% set min_extrude_t = printer.configfile.settings.extruder.min_extrude_temp %}

    {% set purge_retract = svv.filament_pause_retraction %}
    {% set retract_feedrate = svv.filament_retract_feedrate * 60 %}
    {% set purge_length = svv.filament_load_purge_length %}
    {% set fast_purge_feedrate = svv.filament_purge_feedrate * 60 %}
    _DISABLE_FS
    {% if target_t > min_extrude_t %}
        #M300
        M117 {target_t|int} is enough
        {%if not printer.extruder.can_extrude %}
            M117 Wait for {target_t|int}C
            M109 S{target_t}
            M117 Hot!
        {% endif %}
        M83
        M117 PURGE E{purge_length} F{fast_purge_feedrate / 2} 
        G1 E{purge_length} F{fast_purge_feedrate / 2}
        G4 P5000
        G1 E-{purge_retract} F{retract_feedrate}
        M82


    {% else %}
        M117 {target_t|int} is too cold
        M300
        G4 P200
        M300
    {% endif %}
    _RESET_FS
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=30
    RESTORE_GCODE_STATE NAME=PURGE_state


# These expect a filament motion sensor named "filament_sensor"
#  only works if filament_disable_ms is set to 1

[gcode_macro _DISABLE_FS]
description: placehlder, disables filament sensor that might trigger an M600 in the middle of a load/unload/M600...
variable_triggered: 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set version = printer["gcode_macro M600"].version %}
    #{% set ignore = "none" %}
    {% if svv.filament_version|float < version|float %}
        { action_raise_error("Setup data is older than macro version
        You should check the values in INIT_SETUP and run it to update
        ")}
    {% endif %}

    {% if (svv.filament_disable_ms|int == 1|int) %}
        # and ( printer["filament_motion_sensor my_sensor"].enabled or printer["filament_switch_sensor my_sensor"].enabled)
        #this should be waaay smarter.
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=0
         { action_respond_info("Filament Motion Sensor Disabled")}
        SET_GCODE_VARIABLE MACRO=_DISABLE_FS VARIABLE=triggered VALUE=1
    {% endif %}

[gcode_macro _RESET_FS]
description: placehlder, enables filament sensor if and only if it was turned off by _DISABLE_FS
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set version = printer["gcode_macro M600"].version %}
    {% if svv.filament_version|float < version|float %}
        { action_raise_error("Setup data is older than macro version
        You should check the values in INIT_SETUP and run it to update
        ")}
    {% endif %}
    {% set triggered = printer["gcode_macro _DISABLE_FS"].triggered %}
    {% if (triggered|int == 1|int) %}
    # this shoiuld check _DISABLE_FS for smart
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        SET_FILAMENT_SENSOR SENSOR=switch_sensor ENABLE=1
        SET_GCODE_VARIABLE MACRO=_DISABLE_FS VARIABLE=triggered VALUE=0
        { action_respond_info("Filament Motion Sensor re-enabled")}
    {% endif %}



    
